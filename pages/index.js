import { useState, useEffect, useRef } from "react";
import Head from "next/head";

import Link from "next/link";

import { useStripe } from "@stripe/react-stripe-js";

import Nav from "@/components/Nav";
import { auth, db, provider } from "@/lib/firebase-app";
import {
    doc,
    getDoc,
    collection,
    getDocs,
    addDoc,
    setDoc,
    onSnapshot,
} from "firebase/firestore";

import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";

// import { Heading, Text } from "@chakra-ui/react";

import { useAuth } from "@/context/AuthContext";

import {
    getTotal,
    incrementCart,
    decrementCart,
    getQuantity,
    reverseGeocode,
    onChangeAddress,
} from "@/lib/helpers";
// import { zipCodes } from "@/data/zipCodes";

import {
    Table,
    Thead,
    Tbody,
    Tfoot,
    Tr,
    Th,
    Td,
    TableCaption,
    Input,
    Editable,
    EditableInput,
    EditablePreview,
    Box,
    Center,
    useColorModeValue,
    Heading,
    Text,
    Stack,
    Image,
} from "@chakra-ui/react";

const IMAGE =
    "https://images.unsplash.com/photo-1518051870910-a46e30d9db16?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80";

const geocodeJson = "https://maps.googleapis.com/maps/api/geocode/json";

export default function Home({ products }) {
    const { cart, setCart, currentUser, address, setAddress } = useAuth();

    // Hooks
    const stripe = useStripe();

    // State
    const [isCheckout, setIsCheckout] = useState(false);
    const [addAptNum, setAddAptNum] = useState(false);

    const findMyLocation = () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                reverseGeocode(position.coords);
            });
        }
    };

    const initAutocomplete = () => {
        // console.log("init autocomplete");
        // console.log(searchInput.current);
        if (!searchInput.current) {
            return;
        }

        const center = { lat: 38.829012046345916, lng: -121.25028977951666 };
        const defaultBounds = {
            north: center.lat + 0.1,
            south: center.lat - 0.1,
            east: center.lng + 0.1,
            west: center.lng - 0.1,
        };

        const options = {
            bounds: defaultBounds,
            componentRestrictions: { country: "us" },
            fields: ["address_components"],
            strictBounds: true,
            types: ["address"],
        };

        const autocomplete = new window.google.maps.places.Autocomplete(
            searchInput.current,
            options
        );

        autocomplete.addListener("place_changed", () => {
            setAddress(onChangeAddress(autocomplete));

            localStorage.setItem(
                "address",
                JSON.stringify(onChangeAddress(autocomplete))
            );

            // setIsDeliverable(
            //     zipCodes.includes(onChangeAddress(autocomplete).zip)
            // );
        });
    };

    const searchInput = useRef(null);

    useEffect(() => {
        console.log("init script");
        if (!Object.entries(address).length > 0) {
            if (window.google) {
                console.log(window.google);
                initAutocomplete();
                // findMyLocation();
            }
        }
    }, [address]);

    const handleClick = async (e) => {
        e.preventDefault();

        const line_items = cart.map((item) => {
            return {
                amount: item.amount,
                currency: item.currency,
                description: item.description,
                quantity: item.quantity,
                name: item.name,
            };
        });

        const orderItems = cart.map((item) => {
            return {
                id: item.id,
                quantity: item.quantity,
            };
        });

        const orderInfo = {
            orderItems,
            address,
            email: currentUser.email,
            uid: currentUser.uid,
            // sessionId: session.id,
        };

        const body = {
            line_items,
            orderInfo,
            customer: currentUser.stripe_customer_id,
        };

        const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/checkout`, {
            method: "POST",
            body: JSON.stringify(body),
            headers: {
                "Content-Type": "application/json",
            },
        });

        const { session } = await res.json();

        const { error } = await stripe.redirectToCheckout({
            sessionId: session.id,
        });

        if (error) {
            console.log({ error });
        }
    };

    return (
        <div className="">
            <Head>
                <title>Benji Bakes</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="container">
                <Nav />
                {!Object.entries(address).length && (
                    <div className="mb-6">
                        <Input type="text" ref={searchInput} />
                    </div>
                )}

                <div className="mb-6">
                    {Object.entries(address).length > 0 && (
                        <div className="mb-12">
                            <div>
                                {" "}
                                <strong>Your Address</strong>
                            </div>
                            <div>
                                {address.streetNumber} {address.streetName}{" "}
                                <Editable
                                    placeholder={`${
                                        address.aptNum
                                            ? address.aptNum
                                            : "Add Apartment Number"
                                    } `}
                                    onSubmit={(e) => {
                                        // console.log({ e });
                                        setAddress((prevState) => {
                                            return {
                                                ...prevState,
                                                aptNum: e,
                                            };
                                        });
                                        localStorage.setItem(
                                            "address",
                                            JSON.stringify({
                                                ...address,
                                                aptNum: e,
                                            })
                                        );
                                    }}
                                >
                                    <EditablePreview />
                                    <EditableInput />
                                </Editable>
                                {address.city}, {address.state} {address.zip}
                            </div>
                            <div
                                onClick={() => {
                                    setAddress({});
                                    localStorage.setItem(
                                        "address",
                                        JSON.stringify({})
                                    );
                                }}
                            >
                                Clear Address
                            </div>
                        </div>
                    )}

                    {!currentUser && (
                        <div>Be sure to sign in to complete your checkout</div>
                    )}
                </div>
                <div className="flex w-full">
                    <div className="w-1/2">
                        {!isCheckout && (
                            <div className="flex w-full">
                                {products.map((item, i) => {
                                    // console.log({ item });
                                    const dollars = item.amount / 100;
                                    return (
                                        <div key={i}>
                                            <Center py={12}>
                                                <Box
                                                    role={"group"}
                                                    p={6}
                                                    maxW={"330px"}
                                                    w={"full"}
                                                    bg={useColorModeValue(
                                                        "white",
                                                        "gray.800"
                                                    )}
                                                    boxShadow={"2xl"}
                                                    rounded={"lg"}
                                                    pos={"relative"}
                                                    zIndex={1}
                                                >
                                                    <Box
                                                        rounded={"lg"}
                                                        mt={-12}
                                                        pos={"relative"}
                                                        height={"230px"}
                                                        _after={{
                                                            transition:
                                                                "all .3s ease",
                                                            content: '""',
                                                            w: "full",
                                                            h: "full",
                                                            pos: "absolute",
                                                            top: 5,
                                                            left: 0,
                                                            backgroundImage: `url(${IMAGE})`,
                                                            filter: "blur(15px)",
                                                            zIndex: -1,
                                                        }}
                                                        _groupHover={{
                                                            _after: {
                                                                filter: "blur(20px)",
                                                            },
                                                        }}
                                                    >
                                                        <Image
                                                            rounded={"lg"}
                                                            height={230}
                                                            width={282}
                                                            objectFit={"cover"}
                                                            src={IMAGE}
                                                        />
                                                    </Box>
                                                    <Stack
                                                        pt={10}
                                                        align={"center"}
                                                    >
                                                        <Text
                                                            textAlign={"center"}
                                                            color={useColorModeValue(
                                                                "gray.700",
                                                                "gray.400"
                                                            )}
                                                            px={3}
                                                        >
                                                            {item.description}
                                                        </Text>
                                                        <Text
                                                            color={"gray.500"}
                                                            fontSize={"sm"}
                                                            textTransform={
                                                                "uppercase"
                                                            }
                                                        ></Text>
                                                        <Heading
                                                            fontSize={"2xl"}
                                                            fontFamily={"body"}
                                                            fontWeight={500}
                                                        >
                                                            {item.name}
                                                        </Heading>
                                                        <Stack
                                                            direction={"row"}
                                                            align={"center"}
                                                        >
                                                            <Text
                                                                fontWeight={800}
                                                                fontSize={"xl"}
                                                            >
                                                                {dollars.toLocaleString(
                                                                    "en-US",
                                                                    {
                                                                        style: "currency",
                                                                        currency:
                                                                            "USD",
                                                                    }
                                                                )}
                                                            </Text>
                                                        </Stack>
                                                        <div className="flex items-center">
                                                            <div
                                                                onClick={() =>
                                                                    incrementCart(
                                                                        item,
                                                                        cart,
                                                                        setCart
                                                                    )
                                                                }
                                                            >
                                                                <AddIcon />
                                                            </div>
                                                            <div
                                                                onClick={() =>
                                                                    decrementCart(
                                                                        item,
                                                                        cart,
                                                                        setCart
                                                                    )
                                                                }
                                                            >
                                                                <RemoveIcon />
                                                            </div>
                                                        </div>
                                                        <Link
                                                            href={`/products/${item.id}`}
                                                        >
                                                            <a>
                                                                Go to product
                                                                page
                                                            </a>
                                                        </Link>
                                                    </Stack>
                                                </Box>
                                            </Center>
                                            {/* <div
                                                key={i}
                                                className="mb-6 lg:w-1/2"
                                            >
                                                <Heading>{item.name}</Heading>
                                                <Text>{item.description}</Text>
                                                <div>{item.quantity}</div>

                                                <div>
                                                    {dollars.toLocaleString(
                                                        "en-US",
                                                        {
                                                            style: "currency",
                                                            currency: "USD",
                                                        }
                                                    )}
                                                </div>
                                            </div> */}
                                        </div>
                                    );
                                })}
                            </div>
                        )}
                    </div>
                    <div className="w-1/2">
                        <Table variant="simple">
                            <TableCaption placement="top">
                                Shopping cart
                            </TableCaption>
                            <Thead>
                                <Tr>
                                    <Th>Name</Th>
                                    <Th>quantity</Th>
                                    <Th isNumeric>total</Th>
                                </Tr>
                            </Thead>
                            <Tbody>
                                {cart.map((item, i) => {
                                    const itemTotal =
                                        (item.amount * item.quantity) / 100;
                                    return (
                                        <Tr key={i}>
                                            <Td>{item.name}</Td>
                                            <Td>{item.quantity}</Td>
                                            <Td isNumeric>
                                                {itemTotal.toLocaleString(
                                                    "en-US",
                                                    {
                                                        style: "currency",
                                                        currency: "USD",
                                                    }
                                                )}
                                            </Td>
                                        </Tr>
                                    );
                                })}
                            </Tbody>
                            <Tfoot>
                                <Tr>
                                    <Th>Total</Th>
                                    {/* <Th>into</Th> */}
                                    <Th isNumeric>
                                        {getTotal(cart).toLocaleString(
                                            "en-US",
                                            {
                                                style: "currency",
                                                currency: "USD",
                                            }
                                        )}
                                    </Th>
                                </Tr>
                            </Tfoot>
                        </Table>
                        <div>
                            {currentUser && (
                                <>
                                    {getTotal(cart) > 0 && (
                                        <div
                                            onClick={() => setIsCheckout(true)}
                                        >
                                            Go to checkout
                                        </div>
                                    )}{" "}
                                </>
                            )}
                            {!currentUser && cart.length > 0 && (
                                <>Sign in to check out</>
                            )}
                        </div>
                    </div>
                </div>

                {/* https://www.youtube.com/watch?v=fdcruaIiQxc */}
                {/* {accessToken && (
                    <Chat client={client} theme="team light">
                        <ChatInner />
                    </Chat>
                )} */}

                {isCheckout && (
                    <>
                        <div>Checkout mode</div>
                        <div>Checkout total: {getTotal(cart)}</div>
                        <div>Order: {getQuantity(cart)}</div>
                        <div onClick={() => setIsCheckout(false)}>
                            Back to order
                        </div>
                        {Object.entries(address).length > 0 ? (
                            <div onClick={handleClick}>Complete Checkout</div>
                        ) : (
                            <div>Enter an address</div>
                        )}
                    </>
                )}
            </main>
        </div>
    );
}
export async function getServerSideProps(context) {
    const productsCollectionRef = collection(db, "products");
    const productsCollection = await getDocs(productsCollectionRef);

    const products = productsCollection?.docs?.map((doc) => ({
        ...doc.data(),
        id: doc.id,
    }));

    return {
        props: {
            products,
        }, // will be passed to the page component as props
    };
}
